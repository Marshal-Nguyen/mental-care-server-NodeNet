const requireUser = require("../../../middlewares/requireUser");
const { createClient } = require("@supabase/supabase-js");
const express = require("express");
const router = express.Router();
const axios = require("axios");

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY,
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false,
    },
  }
);

// Helper: shuffle array
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

// Helper: calculate age
function calculateAge(birthDate) {
  const today = new Date();
  const birth = new Date(birthDate);
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age;
}

// Helper: severity level
function determineSeverity(totalScore) {
  if (totalScore >= 30) return "Severe";
  if (totalScore >= 15) return "Moderate";
  return "Mild";
}

// Helper: Gemini prompt builder
function buildGeminiPrompt(
  depressionScore,
  anxietyScore,
  stressScore,
  profile,
  lifestyle
) {
  const improvementGoalsSection =
    lifestyle.ImprovementGoals.length > 0
      ? `- **M·ª•c ti√™u hi·ªán t·∫°i**: ${lifestyle.ImprovementGoals.join(", ")}`
      : "";

  const recentEmotionsSection =
    lifestyle.EmotionSelections.length > 0
      ? `- **C·∫£m x√∫c g·∫ßn ƒë√¢y**: ${lifestyle.EmotionSelections.join(", ")}`
      : "";

  return `
    ## üåø G·ª£i √Ω c·∫£i thi·ªán t√¢m l√Ω cho ${profile.FullName}

    ### üë§ Th√¥ng tin ng∆∞·ªùi d√πng
    - **H·ªç t√™n**: ${profile.FullName}  
    - **Gi·ªõi t√≠nh**: ${profile.Gender}  
    - **Ng√†y sinh**: ${profile.BirthDate}  
    - **Ngh·ªÅ nghi·ªáp**: ${profile.JobTitle}  
    - **Ng√†nh ngh·ªÅ**: ${profile.IndustryName}  
    - **T√≠nh c√°ch n·ªïi b·∫≠t**: ${profile.PersonalityTraits}  
    - **Ti·ªÅn s·ª≠ d·ªã ·ª©ng**: ${profile.Allergies || "Kh√¥ng r√µ"}

    ### üìä K·∫øt qu·∫£ DASS-21
    - **Tr·∫ßm c·∫£m**: ${depressionScore}  
    - **Lo √¢u**: ${anxietyScore}  
    - **CƒÉng th·∫≥ng**: ${stressScore}

    ### üìñ ƒê√°nh gi√° nhanh
    Vi·∫øt m·ªôt ƒëo·∫°n ch√†o h·ªèi th√¢n thi·ªán, ng·∫Øn g·ªçn. Sau ƒë√≥, di·ªÖn gi·∫£i k·∫øt qu·∫£ DASS-21 m·ªôt c√°ch ƒë∆°n gi·∫£n, t·∫≠p trung v√†o vi·ªác ƒë√¢y l√† tr·∫°ng th√°i **t·∫°m th·ªùi** v√† c√≥ th·ªÉ c·∫£i thi·ªán.  
    Gi·ªçng vƒÉn **nh·∫π nh√†ng, truy·ªÅn c·∫£m h·ª©ng, kh√¥ng ph√°n x√©t, kh√¥ng ch·∫©n ƒëo√°n.**
    H√£y c√° nh√¢n h√≥a l·ªùi khuy√™n d·ª±a tr√™n th√¥ng tin ng∆∞·ªùi d√πng, ƒë·∫∑c bi·ªát ch√∫ √Ω ƒë·∫øn ngh·ªÅ nghi·ªáp, t√≠nh c√°ch, tu·ªïi, ng√†y th√°ng nƒÉm sinh v√† m·ª•c ti√™u c·∫£i thi·ªán c·ªßa ng∆∞·ªùi d√πng.

    ---

    ### üß† C·∫£m x√∫c c·ªßa b·∫°n
    M√¥ t·∫£ r·∫•t ng·∫Øn g·ªçn r·∫±ng ng∆∞·ªùi ƒë·ªçc c√≥ th·ªÉ ƒëang tr·∫£i qua c√°c c·∫£m x√∫c nh∆∞ **m·ªát m·ªèi, nh·∫°y c·∫£m ho·∫∑c kh√¥ng r√µ r√†ng**, v√† nh·∫•n m·∫°nh r·∫±ng ƒë√¢y l√† ƒëi·ªÅu **ho√†n to√†n b√¨nh th∆∞·ªùng**.  
    Tr√°nh ph√¢n t√≠ch s√¢u hay suy ƒëo√°n c·ª• th·ªÉ. Gi·ªçng vƒÉn **trung l·∫≠p, g·ª£i m·ªü.**  

    ${improvementGoalsSection}
    ${recentEmotionsSection}

    ---

    ### üéØ G·ª£i √Ω cho b·∫°n
    ƒê∆∞a ra **3 ho·∫°t ƒë·ªông nh·∫π nh√†ng, c√° nh√¢n h√≥a theo k·∫øt qu·∫£ DASS-21 v√† ƒë·∫∑c ƒëi·ªÉm ng∆∞·ªùi d√πng**, m·ªói ho·∫°t ƒë·ªông g·ªìm:
    - **Ti√™u ƒë·ªÅ g·ª£i c·∫£m x√∫c t√≠ch c·ª±c**.
    - **M√¥ t·∫£ s√¢u h∆°n** (3‚Äì4 c√¢u) v·ªÅ l·ª£i √≠ch c·ªßa ho·∫°t ƒë·ªông, l√Ω gi·∫£i v√¨ sao n√≥ ph√π h·ª£p v·ªõi ng∆∞·ªùi c√≥ m·ª©c ƒë·ªô tr·∫ßm c·∫£m/lo √¢u/cƒÉng th·∫≥ng nh∆∞ v·∫≠y. C√≥ th·ªÉ tham chi·∫øu ƒë·∫øn ngh·ªÅ nghi·ªáp, t√≠nh c√°ch ho·∫∑c ƒë·ªô tu·ªïi n·∫øu ph√π h·ª£p.
    - **Danh s√°ch 2 h√†nh ƒë·ªông c·ª• th·ªÉ, d·ªÖ th·ª≠** m√† ng∆∞·ªùi ƒë·ªçc c√≥ th·ªÉ b·∫Øt ƒë·∫ßu ngay t·ª´ h√¥m nay, li√™n quan t·ªõi profile ng∆∞·ªùi d√πng.
    - **M·ªôt tr√≠ch d·∫´n ho·∫∑c d·∫´n ch·ª©ng khoa h·ªçc** c√≥ th·∫≠t, tr√¨nh b√†y ng·∫Øn g·ªçn, g·ª£i s·ª± tin c·∫≠y v√† d·ªÖ hi·ªÉu. V√≠ d·ª•: ‚ÄúTheo nghi√™n c·ª©u c·ªßa ƒê·∫°i h·ªçc Stanford nƒÉm 2019, ng∆∞·ªùi d√†nh 30 ph√∫t m·ªói ng√†y trong thi√™n nhi√™n c√≥ m·ª©c ƒë·ªô lo √¢u th·∫•p h∆°n 21%‚Äù.

    L∆∞u √Ω:
    - VƒÉn phong **·∫•m √°p ‚Äì g·∫ßn g≈©i ‚Äì mang t√≠nh n√¢ng ƒë·ª°**, kh√¥ng mang gi·ªçng gi·∫£ng gi·∫£i.
    - **K·∫øt n·ªëi g·ª£i √Ω v·ªõi k·∫øt qu·∫£ DASS-21 v√† persona** (v√≠ d·ª•: ng∆∞·ªùi h∆∞·ªõng n·ªôi, c√¥ng vi·ªác √°p l·ª±c cao, h·ªçc v·∫•n cao s·∫Ω th√≠ch h·ª£p v·ªõi thi·ªÅn, √¢m nh·∫°c, ghi ch√©p...).

    ---

    ### üíå L·ªùi ch√∫c
    K·∫øt th√∫c b·∫±ng m·ªôt l·ªùi nh·∫Øn **t√≠ch c·ª±c v√† m·∫°nh m·∫Ω**, nh·∫•n m·∫°nh r·∫±ng ng∆∞·ªùi ƒë·ªçc **x·ª©ng ƒë√°ng ƒë∆∞·ª£c ch·ªØa l√†nh v√† h·∫°nh ph√∫c**, v√† **kh√¥ng h·ªÅ ƒë∆°n ƒë·ªôc**.  
    Lu√¥n k·∫øt b·∫±ng ch·ªØ k√Ω:  
    **‚Äî Emo üåø**
  `;
}

// GET: l·∫•y test questions theo TestId (option ƒë∆∞·ª£c x√°o tr·ªôn)
router.get("/tests/:testId/questions", requireUser, async (req, res) => {
  const { testId } = req.params;
  const pageIndex = parseInt(req.query.pageIndex) || 1;
  const pageSize = parseInt(req.query.pageSize) || 21;

  try {
    const { data: questions, error } = await supabase
      .from("TestQuestions")
      .select(
        `
        Id,
        Order,
        Content,
        options:QuestionOptions (
          Id,
          Content,
          OptionValue
        )
      `
      )
      .eq("TestId", testId)
      .order("Order", { ascending: true });

    if (error) {
      console.error("L·ªói khi truy v·∫•n Supabase:", error);
      return res.status(500).json({ error: "L·ªói khi l·∫•y c√¢u h·ªèi" });
    }

    // Shuffle options for each question
    const questionsWithShuffledOptions = questions.map((question, idx) => ({
      ...question,
      questionNumber: idx + 1,
      options: shuffleArray([...question.options]),
    }));

    const totalCount = questionsWithShuffledOptions.length;
    const paginated = questionsWithShuffledOptions.slice(
      (pageIndex - 1) * pageSize,
      pageIndex * pageSize
    );

    return res.json({
      testQuestions: {
        pageIndex,
        pageSize,
        totalCount,
        data: paginated,
      },
    });
  } catch (err) {
    console.error("L·ªói server:", err);
    return res.status(500).json({ error: "Internal Server Error" });
  }
});

// POST: submit k·∫øt qu·∫£ test
// POST: submit k·∫øt qu·∫£ test
router.post("/tests/test-results", requireUser, async (req, res) => {
  const { patientId, testId, selectedOptionIds } = req.body;

  try {
    // L·∫•y th√¥ng tin t·∫•t c·∫£ c√°c option ƒë√£ ch·ªçn
    const { data: options, error: optionError } = await supabase
      .from("QuestionOptions")
      .select("Id, OptionValue, TestQuestionId")
      .in("Id", selectedOptionIds);

    if (optionError) throw optionError;

    // D·ª±a tr√™n TestId ƒë·ªÉ truy v·∫•n lo·∫°i c√¢u h·ªèi
    const { data: questions, error: questionError } = await supabase
      .from("TestQuestions")
      .select("Id, Content, TestId, Order")
      .eq("TestId", testId);

    if (questionError) throw questionError;

    // G·∫Øn lo·∫°i ƒëi·ªÉm cho t·ª´ng c√¢u d·ª±a v√†o th·ª© t·ª± c√¢u h·ªèi (gi·ªëng DASS-21)
    const scoringMap = {};
    questions.forEach((q) => {
      const order = q.Order;
      if ([3, 5, 10, 13, 16, 17, 21].includes(order))
        scoringMap[q.Id] = "Depression";
      else if ([2, 4, 7, 9, 15, 19, 20].includes(order))
        scoringMap[q.Id] = "Anxiety";
      else if ([1, 6, 8, 11, 12, 14, 18].includes(order))
        scoringMap[q.Id] = "Stress";
    });

    // T√≠nh ƒëi·ªÉm theo lo·∫°i
    const score = { Depression: 0, Anxiety: 0, Stress: 0 };
    options.forEach((opt) => {
      const type = scoringMap[opt.TestQuestionId];
      if (type && score[type] !== undefined) {
        score[type] += opt.OptionValue;
      }
    });

    // L·∫•y th√¥ng tin b·ªánh nh√¢n v·ªõi x·ª≠ l√Ω l·ªói
    let profile = {};
    let patientName = "Unknown";
    let birthDate = null;
    let patientAge = 0;

    try {
      const profileResponse = await axios.get(
        `https://mental-care-server-nodenet.onrender.com/api/patient-profiles/${patientId}`
      );
      profile = profileResponse.data || {};
      patientName = profile.FullName || "Unknown";
      birthDate = profile.BirthDate || null;
      patientAge = birthDate ? calculateAge(birthDate) : 0;
    } catch (error) {
      console.warn("Failed to fetch patient profile:", error.message);
    }

    // L·∫•y JobTitle v√† IndustryName v·ªõi x·ª≠ l√Ω l·ªói
    let jobTitle = "Unknown";
    let industryName = "Unknown";

    try {
      const jobResponse = await axios.get(
        `https://mental-care-server-nodenet.onrender.com/api/patient-job-info/${patientId}`
      );
      const jobInfo = jobResponse.data || {};
      jobTitle = jobInfo.JobTitle || "Unknown";
      industryName = jobInfo.IndustryName || "Unknown";
    } catch (error) {
      console.warn("Failed to fetch patient job info:", error.message);
    }

    // L·∫•y ImprovementGoals v·ªõi x·ª≠ l√Ω l·ªói
    let improvementGoals = [];

    try {
      const improvementResponse = await axios.get(
        `https://mental-care-server-nodenet.onrender.com/api/patient-improvement/${patientId}`
      );
      improvementGoals = Array.isArray(improvementResponse.data)
        ? improvementResponse.data
        : [];
    } catch (error) {
      console.warn("Failed to fetch patient improvement goals:", error.message);
    }

    // L·∫•y EmotionSelections v·ªõi x·ª≠ l√Ω l·ªói
    let emotionSelections = [];

    try {
      const emotionResponse = await axios.get(
        `https://mental-care-server-nodenet.onrender.com/api/patient-emotions/${patientId}`
      );
      emotionSelections = Array.isArray(emotionResponse.data)
        ? emotionResponse.data
        : [];
    } catch (error) {
      console.warn("Failed to fetch patient emotions:", error.message);
    }

    // T√≠nh t·ªïng ƒëi·ªÉm ƒë·ªÉ x√°c ƒë·ªãnh SeverityLevel
    const totalScore = score.Depression + score.Anxiety + score.Stress;
    const severityLevel = determineSeverity(totalScore);

    // X√¢y d·ª±ng payload cho API Gemini v·ªõi d·ªØ li·ªáu an to√†n
    const geminiPayload = {
      contents: [
        {
          role: "user",
          parts: [
            {
              text: buildGeminiPrompt(
                score.Depression,
                score.Anxiety,
                score.Stress,
                {
                  FullName: patientName,
                  Gender: profile.Gender || "Unknown",
                  BirthDate: birthDate || "Unknown",
                  JobTitle: jobTitle,
                  EducationLevel: profile.EducationLevel || "Unknown",
                  IndustryName: industryName,
                  PersonalityTraits: profile.PersonalityTraits || "Unknown",
                  Allergies: profile.Allergies || "Kh√¥ng r√µ",
                },
                {
                  ImprovementGoals: improvementGoals,
                  EmotionSelections: emotionSelections,
                }
              ),
            },
          ],
        },
      ],
      generationConfig: {
        responseSchema: {
          type: "object",
          properties: {
            overview: { type: "string" },
            emotionAnalysis: { type: "string" },
            personalizedSuggestions: {
              type: "array",
              items: {
                type: "object",
                properties: {
                  title: { type: "string" },
                  description: { type: "string" },
                  tips: { type: "array", items: { type: "string" } },
                  reference: { type: "string" },
                },
                required: ["title", "description", "tips", "reference"],
              },
            },
            closing: { type: "string" },
          },
          required: [
            "overview",
            "emotionAnalysis",
            "personalizedSuggestions",
            "closing",
          ],
          propertyOrdering: [
            "overview",
            "emotionAnalysis",
            "personalizedSuggestions",
            "closing",
          ],
        },
      },
    };

    // G·ªçi API Gemini v·ªõi x·ª≠ l√Ω l·ªói
    let recommendation = { raw: "Kh√¥ng th·ªÉ t·∫°o g·ª£i √Ω do l·ªói h·ªá th·ªëng" };

    try {
      const apiKey = process.env.GEMINI_API_KEY;
      const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-lite-preview-06-17:generateContent?key=${apiKey}`;

      const geminiResponse = await axios.post(url, geminiPayload, {
        headers: { "Content-Type": "application/json" },
        timeout: 30000, // 30 seconds timeout
      });

      const responseText =
        geminiResponse.data.candidates[0].content.parts[0].text;

      try {
        recommendation = JSON.parse(responseText);
      } catch (parseError) {
        console.warn("Gemini response is not valid JSON, saving as raw text.");
        recommendation = { raw: responseText };
      }
    } catch (geminiError) {
      console.error("Failed to call Gemini API:", geminiError.message);
      recommendation = {
        raw: "T·∫°m th·ªùi kh√¥ng th·ªÉ t·∫°o g·ª£i √Ω c√° nh√¢n h√≥a. Vui l√≤ng th·ª≠ l·∫°i sau.",
      };
    }

    // T·∫°o b·∫£n ghi TestResult
    const { data: testResult, error: insertError } = await supabase
      .from("TestResults")
      .insert([
        {
          PatientId: patientId,
          TestId: testId,
          TakenAt: new Date().toISOString(),
          DepressionScore: score.Depression,
          AnxietyScore: score.Anxiety,
          StressScore: score.Stress,
          SeverityLevel: severityLevel,
          RecommendationJson: JSON.stringify(recommendation),
          CreatedAt: new Date().toISOString(),
        },
      ])
      .select()
      .single();

    if (insertError || !testResult || !testResult.Id) {
      console.error("Insert TestResult error:", insertError);
      return res.status(500).json({ error: "Kh√¥ng l·∫•y ƒë∆∞·ª£c testResultId" });
    }

    const testResultId = testResult.Id;

    // T·∫°o b·∫£n ghi trong QuestionOptionTestResult
    const inserts = selectedOptionIds.map((optionId) => ({
      SelectedOptionsId: optionId,
      TestResultsId: testResultId,
    }));

    const { error: linkError } = await supabase
      .from("QuestionOptionTestResult")
      .insert(inserts);

    if (linkError) {
      console.error("Insert QuestionOptionTestResult error:", linkError);
      return res.status(500).json({ error: "L·ªói khi l∆∞u l·ª±a ch·ªçn c√¢u h·ªèi" });
    }

    // Tr·∫£ v·ªÅ response theo ƒë·ªãnh d·∫°ng y√™u c·∫ßu
    return res.json({
      testResult: {
        id: testResultId,
        testId: testResult.TestId,
        patientId: testResult.PatientId,
        takenAt: testResult.TakenAt,
        severityLevel: testResult.SeverityLevel,
        depressionScore: { value: testResult.DepressionScore },
        anxietyScore: { value: testResult.AnxietyScore },
        stressScore: { value: testResult.StressScore },
        recommendation: recommendation,
        patientName: patientName,
        patientAge: patientAge,
      },
    });
  } catch (err) {
    console.error("Submit error:", err);
    return res.status(500).json({ error: "Submit failed" });
  }
});

// GET: l·∫•y k·∫øt qu·∫£ test c·ªßa b·ªánh nh√¢n
router.get(
  "/tests/test-result/:testResultId",
  requireUser,
  async (req, res) => {
    const { testResultId } = req.params;

    try {
      const { data, error } = await supabase
        .from("TestResults")
        .select(
          "Id, TestId, PatientId, TakenAt, DepressionScore, AnxietyScore, StressScore, SeverityLevel, RecommendationJson"
        )
        .eq("Id", testResultId)
        .single();

      if (error || !data) {
        console.error("Get TestResult error:", error);
        return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ test" });
      }

      // L·∫•y th√¥ng tin b·ªánh nh√¢n
      const profileResponse = await axios.get(
        `https://mental-care-server-nodenet.onrender.com/api/patient-profiles/${data.PatientId}`
      );
      const profile = profileResponse.data;
      const patientName = profile.FullName;
      const birthDate = profile.BirthDate;
      const patientAge = calculateAge(birthDate);

      let recommendation;
      try {
        recommendation = JSON.parse(data.RecommendationJson);
      } catch (e) {
        recommendation = { raw: data.RecommendationJson };
      }

      return res.json({
        testResult: {
          id: data.Id,
          testId: data.TestId,
          patientId: data.PatientId,
          takenAt: data.TakenAt,
          severityLevel: data.SeverityLevel,
          depressionScore: { value: data.DepressionScore },
          anxietyScore: { value: data.AnxietyScore },
          stressScore: { value: data.StressScore },
          recommendation: recommendation,
          patientName: patientName,
          patientAge: patientAge,
        },
      });
    } catch (err) {
      console.error("Get result error:", err);
      return res.status(500).json({ error: "Failed to get test result" });
    }
  }
);

// Export module
module.exports = router;